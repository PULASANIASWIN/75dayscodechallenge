https://leetcode.com/problems/pascals-triangle/
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
     vector<vector<int>>ans;
     for(int i=0;i<numRows;i++)
     {
         vector<int>sub(i+1,1);
         for(int j=1;j<i;j++)
         {
             sub[j]=ans[i-1][j]+ans[i-1][j-1];
             
         }
         ans.push_back(sub);
     }
        return ans;
    }
};
2.https://leetcode.com/problems/remove-duplicates-from-sorted-array/
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
      int count=0,i=0;
      while(i<nums.size())
      {
          
         while(i<nums.size()&&i+1<nums.size()&&nums[i]==nums[i+1])
         {
           i++;  
         }
          nums[count]=nums[i];
          i++;
          count++;
      }
        return count;
    }
};
3.https://leetcode.com/problems/merge-intervals/
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end());
      vector<vector<int>>ans;
    int n=intervals.size();
        for(int i=0;i<n;i++)
        {
            if(ans.empty())
            {
                ans.push_back(intervals[i]);
            }
            else
            {
                vector<int>&v=ans.back();
                int y=v[1];
                if(intervals[i][0]<=y)
                {
                    v[1]=max(y,intervals[i][1]);
                }
                else
                {
                    ans.push_back(intervals[i]);
                }
            }
        }
        return ans;
    }
};
*********************************
4.https://leetcode.com/problems/3sum/
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
     sort(nums.begin(),nums.end());
        vector<vector<int>>res;
        for(int i=0;i< (int)(nums.size())-2;i++)
        {
            if(i==0||(i>0 && nums[i]!=nums[i-1]))
            {
                int lo=i+1,hi=nums.size()-1,sum=0-nums[i];
                while(lo<hi)
                {
                    if(nums[lo]+nums[hi]==sum)
                    {
                        vector<int>temp;
                        temp.push_back(nums[i]);
                        temp.push_back(nums[lo]);
                        temp.push_back(nums[hi]);
                        res.push_back(temp);
                        while(lo<hi&& nums[lo]==nums[lo+1]){lo++;}
                        while(lo<hi&& nums[hi]==nums[hi-1]) {hi--;}
                        lo++;
                        hi--;
                    }
                    else if(nums[lo]+nums[hi]<sum){lo++;}
                    else{ hi--;}
                }
            }
        }
        return res;
    }
};
